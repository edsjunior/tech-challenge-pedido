// <auto-generated />
using System;
using G64.PedidoAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace G64.PedidoAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("G64.PedidoAPI.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("G64.PedidoAPI.Models.ItemPedido", b =>
                {
                    b.Property<Guid>("uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("quantidade")
                        .HasColumnType("integer");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("valorPorUnidade")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("uuid");

                    b.ToTable("ItensPedidos");

                    b.HasData(
                        new
                        {
                            uuid = new Guid("68742585-ef87-445d-b2e1-1b249fecbccb"),
                            categoria = "Lanche",
                            descricao = "Combo Whopper",
                            quantidade = 1,
                            titulo = "Whopper",
                            valorPorUnidade = 15.99m
                        },
                        new
                        {
                            uuid = new Guid("93e1bb7b-088b-4e99-bba3-d04e38ea904a"),
                            categoria = "Bebida",
                            descricao = "Coca-cola",
                            quantidade = 1,
                            titulo = "Refrigerante",
                            valorPorUnidade = 5.99m
                        },
                        new
                        {
                            uuid = new Guid("a4678ce5-d08d-4501-88cb-e2572cfd10e1"),
                            categoria = "Acompanhamento",
                            descricao = "Batata Frita",
                            quantidade = 1,
                            titulo = "Fritas",
                            valorPorUnidade = 7.99m
                        },
                        new
                        {
                            uuid = new Guid("f0251552-0692-4e58-925c-b0bdaa2418ad"),
                            categoria = "Sobremesa",
                            descricao = "Sorvete de flocos",
                            quantidade = 2,
                            titulo = "Sorvete",
                            valorPorUnidade = 9.99m
                        });
                });

            modelBuilder.Entity("G64.PedidoAPI.Models.Pedido", b =>
                {
                    b.Property<Guid>("pedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("statusPagamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("valorTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("pedidoId");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            pedidoId = new Guid("1ecf9905-59fe-4284-940a-720eceb220a6"),
                            data = new DateTime(2024, 8, 8, 14, 32, 27, 169, DateTimeKind.Utc).AddTicks(8579),
                            status = "PENDENTE",
                            statusPagamento = "PENDENTE",
                            valorTotal = 29.97m
                        },
                        new
                        {
                            pedidoId = new Guid("254e95d0-a295-45fd-a515-61936c284fa4"),
                            data = new DateTime(2024, 8, 8, 14, 32, 27, 169, DateTimeKind.Utc).AddTicks(8628),
                            status = "PENDENTE",
                            statusPagamento = "PENDENTE",
                            valorTotal = 19.98m
                        });
                });

            modelBuilder.Entity("PedidoItemPedido", b =>
                {
                    b.Property<Guid>("PedidosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemPedidosId")
                        .HasColumnType("uuid");

                    b.HasKey("PedidosId", "ItemPedidosId");

                    b.HasIndex("ItemPedidosId");

                    b.ToTable("PedidoItemPedido");

                    b.HasData(
                        new
                        {
                            PedidosId = new Guid("1ecf9905-59fe-4284-940a-720eceb220a6"),
                            ItemPedidosId = new Guid("68742585-ef87-445d-b2e1-1b249fecbccb")
                        },
                        new
                        {
                            PedidosId = new Guid("1ecf9905-59fe-4284-940a-720eceb220a6"),
                            ItemPedidosId = new Guid("93e1bb7b-088b-4e99-bba3-d04e38ea904a")
                        },
                        new
                        {
                            PedidosId = new Guid("1ecf9905-59fe-4284-940a-720eceb220a6"),
                            ItemPedidosId = new Guid("a4678ce5-d08d-4501-88cb-e2572cfd10e1")
                        },
                        new
                        {
                            PedidosId = new Guid("254e95d0-a295-45fd-a515-61936c284fa4"),
                            ItemPedidosId = new Guid("f0251552-0692-4e58-925c-b0bdaa2418ad")
                        });
                });

            modelBuilder.Entity("PedidoItemPedido", b =>
                {
                    b.HasOne("G64.PedidoAPI.Models.ItemPedido", null)
                        .WithMany()
                        .HasForeignKey("ItemPedidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("G64.PedidoAPI.Models.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
